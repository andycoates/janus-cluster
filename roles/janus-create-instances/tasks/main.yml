---
- name: Create Janus instances
  ec2:
    region: "{{ env.region }}"
    instance_type: "{{ env.instance_type }}"
    image: "{{ env.ami }}"
    assign_public_ip: yes
    vpc_subnet_id: "{{ item.subnet.id }}"
    group_id: "{{ janus_sg.group_id }}"
    key_name: "JanusKey_{{ env.name }}"
    exact_count: "{{ item.item.servers }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 10
        delete_on_termination: true
    count_tag:
      Name: "JanusStack-{{ item.subnet.availability_zone }}"
    instance_tags:
      Name: "JanusStack-{{ item.subnet.availability_zone }}"
      Env: "{{ env.region }}-{{ env.name }}"
    wait: yes
  #loop_control:
  #  label: "JanusStack-{{ item.subnet.availability_zone }}"
  with_items: "{{ janus_vpc_subnets.results }}"
  register: janus_ec2_instances

#- debug:
#    var: janus_ec2_instances.results|sum(attribute='tagged_instances',start=[])|list

- name: Add Janus instances to inventory
  add_host:
    hostname: "{{ item.public_ip }}"
    groups: "janus-instances,janus-{{ item.region }}-{{ env.name }},janus-{{ item.placement }}-{{ env.name }}"
    private_ip: "{{ item.private_ip }}"
    zone: "{{ item.placement }}"
    ansible_user: "{{ env.ami_user }}"
    ansible_ssh_private_key_file: "region/janus-{{ env.region }}-{{ env.name }}.key"
  #loop_control:
  #  label: "{{ item.public_ip }}"
  with_items: "{{ janus_ec2_instances.results|sum(attribute='tagged_instances',start=[])|list }}"
  changed_when: false

#- debug:
#    msg: "{{ groups['janus-'+aws_region+'-'+env_name] }}"
